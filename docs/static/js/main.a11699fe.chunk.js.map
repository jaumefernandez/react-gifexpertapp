{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","protoType","PropTypes","func","isRequired","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAsB5C,OAEI,sBAAMC,SAhBW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAG5BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,MAQlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAxBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aA8B/BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCCvCrBC,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEZC,EAFY,iDAEqCC,UAAUH,GAF/C,+DAGCI,MAAOF,GAHR,cAGZG,EAHY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAaXM,GAbW,4CAAH,sDCENO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OACI,sBAAKc,UAAU,uBAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCJEO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECFX,SAAEA,GAAe,IAAD,EACdlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAXAC,qBAAU,WACNxB,EAAOC,GACFwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAGGqB,EDbwBK,CAAa1B,GAAhCa,EAHuB,EAG5BN,KAAaa,EAHe,EAGfA,QAYpB,OACI,qCACI,oBAAIJ,UAAU,kBAAd,SAAiChB,IAEhCoB,GAAW,wCAEZ,qBAAKJ,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAIQA,GAHCA,EAAIC,aE3BxBgB,EAAe,WAAO,IAAD,EACM7C,mBAAS,CAAC,cADhB,mBACvB8C,EADuB,KACX/C,EADW,KAW9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ+C,EAAWnB,KAAK,SAACT,GAAD,OACX,cAAC,EAAD,CAEGA,SAAWA,GADLA,Y,MCrBlC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a11699fe.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes  from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            //como es una funcion de referencia hay que utilizar la asignacion como callback\r\n            //en caso contrario debería de pasar por props el \"categories\"\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            //vaciamos el inputvalue para que no vuelva hacer submit\r\n            setInputValue('');\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nAddCategory.protoType = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGif = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=86Ueo6ja0OuV3bc0nQ6sQQtfhfpG7m6B`;\r\n    const resp = await fetch (url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__fadeIn\">\r\n           <img src={url} alt={title} />\r\n           <p> {title} </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    // //se ejecuta cuando se renderiza por primera vez\r\n    // useEffect( () => {\r\n    //     getGif(category)\r\n    //         // .then( imgs => setImages( imgs))\r\n    //         .then(setImages);\r\n    // }, [category])\r\n    //se manda entre corchete la category como referencia para que renderice en el caso de que el objeto se altere\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p>Loading</p> }\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( (img) => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            //es lo mismo las dos siguientes linias... es la opcion spred\r\n                            // img={img}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n            {/* <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( (img) => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            //es lo mismo las dos siguientes linias... es la opcion spred\r\n                            // img={img}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n                \r\n            </div> */}\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getGif } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getGif(category)\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                })\r\n            })\r\n    }, [category])\r\n\r\n\r\n    return state; // { data: [], loading: true };\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // opcion 1\r\n    //     // setCategories( [...categories, 'hunterxhunter'] );\r\n\r\n    //     //opción, a esto se le llama callback\r\n    //     setCategories( cats => [...cats, 'HunterXHunter']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr />\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => (\r\n                         <GifGrid \r\n                            key={ category } \r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}